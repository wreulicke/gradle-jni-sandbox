/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample CPP project to get you started.
 */

plugins {
    // Apply the cpp-application plugin to add support for building CPP executables
    id 'cpp-library'

    // Apply the cpp-unit-test plugin to add support for building and running CPP test executables
}

apply plugin: 'java'

def SYS_INCLUDE_DIR = this.properties['system.include.dir']
def SYS_LOCAL_INCLUDE_DIR = this.properties['system.local.include.dir']
def JNI_INCLUDE_DIR = this.properties['jni.include.dir']
def JNI_LIB_DIR = this.properties['jni.lib.dir']

library {
    targetMachines.add(machines.macOS.x86_64)
}


model {
    toolChains {
        gcc(Gcc) {
            eachPlatform {
                cppCompiler.withArguments { args ->
                    args << "-I" + SYS_INCLUDE_DIR
                    args << "-I" + SYS_LOCAL_INCLUDE_DIR
                    args << "-I" + JNI_INCLUDE_DIR
                    args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                }
            }
        }
        clang(Clang) {
            eachPlatform {
                cppCompiler.withArguments { args ->
                    args << "-I" + SYS_INCLUDE_DIR
                    args << "-I" + SYS_LOCAL_INCLUDE_DIR
                    args << "-I" + JNI_INCLUDE_DIR
                    args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.12"
}

model {
    tasks.test {
        dependsOn copyNativeDeps
    }
    tasks.copyNativeDeps {
        dependsOn linkDebug
    }
}


task copyNativeDeps(type: Copy) {	
    from ("$projectDir/build/lib/main/debug") {	
        include "*.dylib"
        include "*.so"
        include "*.dll"
    }
    into 'build/libs'
}

test {
    doFirst {
        systemProperty "java.library.path", "$projectDir/build/libs"
    }
}